[General]
network = networkFinal
repeat =40 
#sim-time-limit = ${simtime = 50, 150, 200, 300, 600}s
sim-time-limit = ${simtime = 500}s
#**.numMembers = ${n = 0, 1, 2, 3, 4, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60}
**.numMembers = ${n = 0,1,2,3,4,5,10,15}
#seed-set = ${repetition} 
warmup-period = 10s 

# Result parameters
# with leading / the file path is absolute
# without leading / the path is relative to the project directory
# result-dir = results
result-dir=/utmnt/ut/se/cuw3185/DownLinkNew5-0-15

# some can be enabled if desired, but
# this produces a lot of data
#**.thruputMeter.**.vector-recording = true
# disable all others
#**.vector-recording = false


## With the following two lines you can record all events for
## detailed examination in the graphical OMNeT++
#eventlog-file = omnetpp.log
#record-eventlog = true

## With the following three lines you can redirect the output of the 
## stdout print to a file for detailed examination
#cmdenv-express-mode = false
#cmdenv-redirect-output = true
#cmdenv-output-file = log.txt

**.constraintAreaMinX = 0m
**.constraintAreaMinY = 0m
**.constraintAreaMinZ = 0m
**.constraintAreaMaxX = 600m
**.constraintAreaMaxY = 400m
**.constraintAreaMaxZ = 0m

**.mobilityType = "StationaryMobility"
**.mobility.initFromDisplayString = false  
**.CH_AccessPoint.mobility.initialX = 15m #+ 235m 
**.CH_AccessPoint.mobility.initialY = 5m #+ 295m
**.CH_AccessPoint.mobility.initialZ = 0m
**.clusterMember[*].mobility.initialX = uniform(0, 30)*1m # +300m
**.clusterMember[*].mobility.initialY = uniform(0, 100)*1m # +300m
**.clusterMember[*].mobility.initialZ = 0m
**.SensorCar.mobility.initialX = 15m #+100m
**.SensorCar.mobility.initialY = 0m #300m
**.SensorCar.mobility.initialZ = 0m

# clusterMember settings
**.clusterMember[0].numTcpApps = 2 #first clusterMember is chosen to send files to FTP server
**.clusterMember[*].numTcpApps = 1
**.clusterMember[*].tcpApp[0].typename = "TCPBasicClientApp"
**.clusterMember[*].tcpApp[0].connectAddress = "HTTP_Server"
**.clusterMember[*].tcpApp[0].connectPort = 80 #common port for HTTP 
**.clusterMember[*].tcpApp[0].numRequestsPerSession = 1
**.clusterMember[*].tcpApp[0].requestLength = 200B #length of a request
**.clusterMember[*].tcpApp[0].replyLength = 400kB # length of a reply
**.clusterMember[*].tcpApp[0].thinkTime = 0s
**.clusterMember[*].tcpApp[0].idleInterval = 100ms #  waits for 100 ms before sending  a new request after getting response from HTTP server

#first clusterMember commnuicates with FTP
**.clusterMember[0].tcpApp[1].typename = "TCPBasicClientApp"
**.clusterMember[0].tcpApp[1].connectAddress = "FTP_Server"
**.clusterMember[0].tcpApp[1].connectPort = 20 #common port for FTP
**.clusterMember[0].tcpApp[1].numRequestsPerSession = 1
#Downlink scenario
**.clusterMember[0].tcpApp[1].requestLength = 100B #length of a request
**.clusterMember[0].tcpApp[1].replyLength = 10GB # length of a reply
#Uplink scenario
#**.clusterMember[0].tcpApp[1].requestLength = 10GB #length of a request
#**.clusterMember[0].tcpApp[1].replyLength = 100B # length of a reply
**.clusterMember[0].tcpApp[1].thinkTime = 0s
**.clusterMember[0].tcpApp[1].idleInterval = 0s
## ----

# HTTPserver Settings
**.HTTP_Server.numTcpApps = 1 
**.HTTP_Server.tcpApp[0].typename = "TCPGenericSrvApp" #
**.HTTP_Server.tcpApp[0].localPort = 80

# FTPServer Settings
**.FTP_Server.numTcpApps = 1 
**.FTP_Server.tcpApp[0].typename = "TCPGenericSrvApp"
**.FTP_Server.tcpApp[0].localPort = 20
## ----

# Some tcp settings
**.tcpApp[*].dataTransferMode = "object"
**.tcpType = "TCP"
**.tcp.tcpAlgorithmClass = "TCPNewReno" 
**.tcp.windowScalingSupport = true
**.tcp.mss = 1460 #1460 bytes 
**.tcp.advertisedWindow = 1460000 # do not use this.mss here but directly give a number

# Routing
**.networkConfiguratorModule = "IPv4_Configurator"
#**.<name of router cluster head>.routingTable.routingFile = 
#**.<name of router at test lab>.routingTable.routingFile = 

# channel physical parameters
**.receiver.sensitivity = -110dBm

# NIC settings
**.mac.address = "auto"
**.mac.maxQueueSize = 50 
**.mac.rtsThresholdBytes = 3000B
**.wlan[*].mac.retryLimit = 7
**.wlan[*].mac.cwMinData = 7
**.opMode = "g(mixed)"
#**.wlan[*].bitrate = 54Mbps #added

# Group specific parameters
## ---- SensorCar commnuicates with UDP
**.SensorCar.numUdpApps = 1
**.SensorCar.udpApp[0].typename = "myUDPAppDL"
**.SensorCar.udpApp[0].localPort = 1000
**.SensorCar.udpApp[0].destPort = 2000
**.SensorCar.udpApp[0].destAddresses = "UDP_Server"
**.SensorCar.udpApp[0].messageLength = 1B*uniform(1000,1400)# uniform distribution tracefile4.csv
**.SensorCar.udpApp[0].sendInterval = 100ms
**.SensorCar.udpApp[0].startTime = 2s

# UDPserver Settings
**.UDP_Server.numUdpApps = 1
**.UDP_Server.udpApp[0].typename = "myUDPAppDL"
**.UDP_Server.udpApp[0].localAddress = "UDP_Server"
**.UDP_Server.udpApp[0].localPort = 2000
**.UDP_Server.udpApp[0].destPort = 1000
**.UDP_Server.udpApp[0].destAddresses = "SensorCar"
**.UDP_Server.udpApp[0].messageLength = 1B*uniform(1000,1400)
**.UDP_Server.udpApp[0].sendInterval = 100ms

## ----

#Added
**.numInputHooks = 1
**.inputHook[0].typename = "ThruputMeter"
**.inputHook[0].maxInterval = 1s #1s	
**.inputHook[0].batchSize = 10000 
**.inputHook[0].**.vector-recording = true

**.numOutputHooks = 1
**.outputHook[0].typename = "ThruputMeter"
**.outputHook[0].maxInterval = 1s
**.outputHook[0].batchSize = 10000 
**.outputHook[0].**.vector-recording = true

**.scalar-recording = true

#**.SensorCar.udpApp[0].**.vector-recording = true
#**.UDP_Server.udpApp[0].**.vector-recording = true
#**.clusterMember[0].**.vector-recording = true
#**.HTTP_Server.ppp[*].inputHook[0].**.vector-recording = true
#**.HTTP_Server.ppp[*].outputHook[0].**.vector-recording = true
#**.FTP_Server.ppp[*].inputHook[0].**.vector-recording = true
#**.FTP_Server.ppp[*].outputHook[0].**.vector-recording = true

**.vector-recording = false
